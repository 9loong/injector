Injector Change Log
===================

0.10.0 (not released yet)
-------------------------

- :meth:`injector.Provider.get()` now requires an :class:`injector.Injector` instance as
  its parameter
- deprecated injecting arguments into modules (be it functions/callables,
  :class:`~injector.Module` constructors or :meth:`injector.Module.configure` methods)
- removed `extends` decorator
- few classes got useful __repr__ implementations
- fixed injecting ProviderOf and AssistedBuilders when :class:`injector.Injector`
  auto_bind is set to False (previously would result in `UnsatisfiedRequirement`
  error)
- fixed crash occurring when Python 3-function annotation use is enabled and
  __init__ method has a return value annotation ("injector.UnknownProvider:
  couldn't determine provider for None to None"), should also apply to free
  functions as well

0.9.1
-----
- Bug fix release.

0.9.0
-----

- Child :class:`~injector.Injector` can rebind dependancies bound in parent Injector (that changes :class:`~injector.Provider` semantics), thanks to Ilya Orlov
- :class:`~injector.CallableProvider` callables can be injected into, thanks to Ilya Strukov
- One can request :class:`~injector.ProviderOf` (Interface) and get a :class:`~injector.BoundProvider` which can be used to get an implementation of Interface when needed

0.8.0
-----

- Binding annotations are removed. Use :func:`~injector.Key` to create unique types instead.


0.7.9
-----

- Fixed regression with injecting unbound key resulting in None instead of raising an exception


0.7.8
-----

- Exception is raised when :class:`~injector.Injector` can't install itself into a class instance due to __slots__ presence
- Some of exception messages are now more detailed to make debugging easier when injection fails
- You can inject functions now - :class:`~injector.Injector` provides a wrapper that takes care of injecting dependencies into the original function

0.7.7
-----

- Made :class:`~injector.AssistedBuilder` behave more explicitly: it can build either innstance of a concrete class (``AssistedBuilder(cls=Class)``) or it will follow Injector bindings (if exist) and construct instance of a class pointed by an interface (``AssistedBuilder(interface=Interface)``). ``AssistedBuilder(X)`` behaviour remains the same, it's equivalent to ``AssistedBuilder(interface=X)``

0.7.6
-----

- Auto-convert README.md to RST for PyPi.

0.7.5
-----

- Added a ChangeLog!
- Added support for using Python3 annotations as binding types.
